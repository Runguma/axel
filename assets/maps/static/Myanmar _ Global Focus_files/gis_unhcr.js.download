


var language = 'en';

function build_map(lang) {
	
	if (lang) {
		language = lang;
	}
	require([
	  "esri/Map",
	  "esri/views/MapView",
	  "esri/layers/TileLayer",
	  "esri/layers/MapImageLayer",
      "esri/Basemap",
	  "esri/widgets/Legend",
	  "esri/request",
	  "dojo/domReady!",
	  ], _build_map);
  }





function _build_map(Map, MapView, TileLayer,MapImageLayer, Basemap, Legend, esriRequest) {

    var jmapInfo = jQuery('#location-map-info').text(),
        mapInfo = JSON.parse(jmapInfo);
    var longit = mapInfo.longitude,
        lat = mapInfo.latitude,
        zoomLevel = (mapInfo.zoom_level>0) ? mapInfo.zoom_level : 6,
		isoCodes = mapInfo.iso_codes;
	
	
    var mapdiv = jQuery('#location-map');
	if ( mapdiv.height() == 0) mapdiv.height(600); //fix issue with pdf
	

	
   var basemapLayer = new TileLayer({
	  //url: "https://services.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer"
      url: "https://services.arcgisonline.com/arcgis/rest/services/World_Shaded_Relief/MapServer"
	  //url: "https://services.arcgisonline.com/arcgis/rest/services/Canvas/World_Dark_Gray_Base/MapServer"
	, opacity: .4
	, id: "basemaplayer"
    });
	
     var basemap = new Basemap({
        baseLayers: [basemapLayer],
        title: "WorldRelief",
        id: "worldrelief"
      });

	var isoClause = "color_code in (" + isoCodes + ")";
	
	var countryRenderer = {
			 type: "simple",  // autocasts as new SimpleRenderer()
				symbol: {
				type: "simple-fill",  // autocasts as new SimpleMarkerSymbol()
				color: "white",
					outline: {  // autocasts as new SimpleLineSymbol()
					  width: 0
					}
				}
			 };
			 
	// sublayers def
	var countryHighlight_1m = {
			  id: 6	
			, opacity: .5
			, definitionExpression: isoClause
			, legendEnabled: false
			, renderer: countryRenderer
			, minScale: 5000000
			, maxScale: 0
		};
		
	var countryHighlight_15m = {
			  id: 7	
			, opacity: .6
			, definitionExpression: isoClause
			, legendEnabled: false
			, renderer: countryRenderer
			, minScale: 500000000
			, maxScale: 5000000
		};		
		
		

	var countryname_field = (language == 'fr') ? 'gis_name_fr' : 'gis_name';
	var officename_field = (language == 'fr') ? 'name_fr' : 'name';
	
	 //'UCase([' + countryname_field + '])',
	var countryNames = {
			  id: 3
  			, visible: true
			, opacity: 0
			, legendEnabled: false
			, labelsVisible: true
			,labelingInfo: [{
			  labelExpression: 'UCASE([' + countryname_field + '])' ,
			  where: "status in ('Member State','Occupied Palestinan Territory', 'Occupied Palestinian Territory') and orig_fid != 20",
			  labelPlacement: "center-center",
			  symbol: {
				type: "text",  // autocasts as new TextSymbol()
				color: [ 100,100,100,1 ],
				font: {
				  size: 7,
				  weight: "regular",
				  family: "Lato"
				}
			  }
			}
			,{
			  labelExpression: '[' + countryname_field + ']' ,
			  where: "status not in ('Member State','Occupied Palestinan Territory', 'Occupied Palestinian Territory')  and orig_fid != 20",
			  labelPlacement: "center-center",
			  symbol: {
				type: "text",  // autocasts as new TextSymbol()
				color: [ 100,100,100,1 ],
				font: {
				  size: 7,
				  weight: "regular",
				  family: "Lato"
				}
			  }
			}
			]
			, minScale: 50000000
			, maxScale: 0
		 };
	var borders_15m =		{
			  id: 5
			, visible: true
			, opacity: .2
			, legendEnabled: false
			, labelsVisible: false
			,labelingInfo: [{
			  labelExpression: '[iso3_cnt1] CONCAT "-" CONCAT [iso3_cnt2]',
			  labelPlacement: "center-along",
			  symbol: {
				type: "text",  // autocasts as new TextSymbol()
				color: [ 20,20,20,1 ],
				font: {
				  size: 6,
				  weight: "regular",
				  family: "Lato"
				}
			  }
			}]
			, minScale: 500000000
			, maxScale: 5000000			
		 };

	var borders_1m =		{
			  id: 4
			, visible: true
			, opacity: .4
			, legendEnabled: false
			, labelsVisible: false
			,labelingInfo: [{
			  labelExpression: '[iso3_1] CONCAT "-" CONCAT [iso3_2]',
			  labelPlacement: "center-along",
			  symbol: {
				type: "text",  // autocasts as new TextSymbol()
				color: [ 20,20,20,1 ],
				font: {
				  size: 6,
				  weight: "regular",
				  family: "Lato"
				}
			  }
			}]
			, minScale: 5000000
			, maxScale: 0			
		 };

	var camps =   {
			id: 0
		  , title: "Camps"	
		  , definitionExpression: "status = 1 "
		  , minScale: 100000000
		  , maxScale: 0	
		  		,
			popupTemplate: {
			  title: "{name}",
			  content: "{loc_type:decodePocField}<br/>{iso3:decodePocField}"
			}
		 };	
	var offices = {
			id: 1
		  , title: "Offices"	
		 // , opacity: .3
		  , definitionExpression: "status = 1 "
		  , labelsVisible: true
		  , labelingInfo: [{
			  where: "iso3  in (" + isoCodes + ")",
			  minScale: 30000000, 
			  labelExpression: "[" + officename_field  + "]",
			  labelPlacement: "below-right",
			  symbol: {
				type: "text",  // autocasts as new TextSymbol()
				color: [ 0,0,0,1 ],
				font: {
				  size: 8,
				  weight: "regular",
				  family: "Lato"
				}
			  }
			}]
		,
			popupTemplate: {
			  title: "{name}",
			  content: "{loc_type:decodePresenceField}<br/>{iso3:decodePresenceField}"
			}			
		, minScale: 100000000
		, maxScale: 0			
		};	 
	
	var UNHCRlayer = new MapImageLayer("https://gis.unhcr.org/arcgis/rest/services/core/core_prod/MapServer",
	{
	  id: "unhcr"
	, sublayers: [
	    countryHighlight_1m
	  , countryHighlight_15m
	  , borders_1m
	  , borders_15m
	  ,	countryNames
	  , offices
	  , camps
    ]
		
	});
			
  var map = new Map({
   basemap: basemap,
   layers: [ UNHCRlayer]
  });
  
  var view = new MapView({
    container: "location-map",  // Reference to the scene div created in step 5
    map: map,  // Reference to the map object created before the scene
    zoom: zoomLevel,  // Sets zoom level based on level of detail (LOD)
    center: [longit, lat]  // Sets center point of view using longitude,latitude
  });
  
	view.ui.move([ "zoom" ], "top-right");
  
	var legend = new Legend({
	view: view,
	container: "legend-wrapper",
	layerInfos: [{
	  layer: UNHCRlayer
    , title: "Legend"
	}]
  });



 var urlPresence = "https://gis.unhcr.org/arcgis/rest/services/core/core_prod/MapServer/1?f=pjson";
 var urlPOC      = "https://gis.unhcr.org/arcgis/rest/services/core/core_prod/MapServer/0?f=pjson";
 var presenceLayerFields;
 var pocLayerFields;
 
	esriRequest(urlPresence, {
	  responseType: "json"
	}).then(function(response){
	   presenceLayerFields = response.data.fields;
	});
	
	esriRequest(urlPOC, {
	  responseType: "json"
	}).then(function(response){
	   pocLayerFields = response.data.fields;
	});
	
	
  function getCodeValue(layerFields, fieldVal, fieldName) {
	var field = layerFields.filter(function(f) { return f.name == fieldName; });
	var val = field[0].domain.codedValues.filter(function(v) { return v.code == fieldVal; });
		
    return val[0].name;
	  
  }
  
  
  decodePresenceField = function (fieldVal, fieldName, data){
	  return getCodeValue(presenceLayerFields, fieldVal, fieldName, data);
 };
  decodePocField = function (fieldVal, fieldName, data){
	  return getCodeValue(pocLayerFields, fieldVal, fieldName, data);
 };
	

}  
  